<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>MASD project</H3>


-->
<applicationtype xmlns="http://www.activecomponents.org/jadex-application"
	xmlns:agr="http://www.activecomponents.org/jadex-agrspace"
	xmlns:env="http://www.activecomponents.org/jadex-envspace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.activecomponents.org/jadex-application 
	                    http://www.activecomponents.org/jadex-application-${jadex_build_version}.xsd
	                    http://www.activecomponents.org/jadex-envspace 
	                    http://www.activecomponents.org/jadex-envspace-${jadex_build_version}.xsd"
	name="Masd" package="upc.masd">
	
	<imports>
		<import>jadex.extension.envsupport.environment.space2d.*</import>
		<import>jadex.extension.envsupport.environment.DeltaTimeExecutor</import>
		<import>jadex.extension.envsupport.math.*</import>
		<import>jadex.extension.envsupport.dataview.*</import>
		<import>java.text.SimpleDateFormat</import>
		<import>java.util.Date</import>
		<import>jadex.extension.envsupport.observer.perspective.*</import>
		<import>upc.masd.spy.*</import>
		<import>upc.masd.movement.*</import>
		<import>jadex.extension.envsupport.evaluation.*</import>
		<import>jadex.extension.envsupport.observer.gui.plugin.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.bridge.service.search.*</import>
		<import>jadex.bridge.service.component.*</import>
		<import>jadex.bridge.service.types.clock.IClockService</import>
	</imports>
	
	<extensiontypes>
		<env:envspacetype name="2dspace" class="ContinuousSpace2D" width="1" height="1">
			<env:property name="targetradius" class="double">0.05</env:property>
			<env:property name="border">Space2D.BORDER_RELAXED</env:property>
		
			<env:objecttypes>
				<env:objecttype name="target">
					<env:property name="ore" class="int">0</env:property>
					<env:property name="capacity" class="int">0</env:property>
					<env:property name="state" class="String">"unknown"</env:property>
				</env:objecttype>
				<env:objecttype name="spy">
					<!-- <env:property name="radarsize" class="Vector3Double" dynamic="true">new Vector3Double(0.1*((((IClockService)((jadex.bridge.service.component.IInternalRequiredServicesFeature)$component.getFeature(jadex.bridge.service.component.IRequiredServicesFeature.class)).getRawService(IClockService.class)).getTick())%10),
					0.01,0.1*((((IClockService)((jadex.bridge.service.component.IInternalRequiredServicesFeature)$component.getFeature(jadex.bridge.service.component.IRequiredServicesFeature.class)).getRawService(IClockService.class)).getTick())%10))
					</env:property>	  -->
					<env:property name="rotation" class="IVector2">new Vector2Double(-1.111, -1.111)</env:property>
					<env:property name="vision" class="double">0.1</env:property>
					<env:property name="speed" class="double">0.05</env:property>
					<env:property name="position" class="IVector2" dynamic="true">$space.getSpaceObjectsByType("homebase")[0].getProperty("position")</env:property>
				</env:objecttype>
				<env:objecttype name="homebase">
					<env:property name="ore" class="int">0</env:property>
	<!--  			<env:property name="text" class="String" dynamic="true">
						"Collected ore: "+$object.getProperty("ore")+" \n"+
						"Remaining time: "+new SimpleDateFormat("mm:ss").format(new Date(Math.max(0, $object.getProperty("missiontime")
							- ((IClockService)((jadex.bridge.service.component.IInternalRequiredServicesFeature)$component.getFeature(jadex.bridge.service.component.IRequiredServicesFeature.class)).getRawService(IClockService.class)).getTime())))
					</env:property>-->	
				</env:objecttype>
			</env:objecttypes>
						
			<env:tasktypes>
				<env:tasktype name="move" class="MoveTask" />
				<env:tasktype name="rotate" class="RotationTask" />
				<env:tasktype name="analyze" class="AnalyzeTargetTask" />
			</env:tasktypes>			
						
			<env:dataviews>
				<env:dataview name="all_view" class="GeneralDataView2D" />
			</env:dataviews>
						
			<env:avatarmappings>
				<env:avatarmapping componenttype="Spy" objecttype="spy"/>
			</env:avatarmappings>
			
			<env:perspectives>
				<env:perspective name="icons" class="Perspective2D">
				
					<!-- Target -->
					<env:drawable objecttype="target" width="0.1" height="0.1">
						<env:property name="oresize" dynamic="true">new Vector2Double(Math.sqrt(((Number)$object.getProperty("capacity")).intValue()/200.0))</env:property>
						<env:property name="oreposition" dynamic="true">new Vector2Double(-0.5, 0.1-Math.sqrt(((Number)$object.getProperty("capacity")).intValue()/200.0)/2)</env:property>
						<env:ellipse layer="0" width="0.2" height="0.2" color="#C8000096">
							<env:drawcondition>!$object.getProperty("state").equals("analyzed") || $object.getProperty("ore")!=0</env:drawcondition>
						</env:ellipse>
						<env:ellipse layer="0" width="0.2" height="0.2" color="#32323296">
							<env:drawcondition>$object.getProperty("state").equals("analyzed") &amp;&amp; $object.getProperty("ore")==0</env:drawcondition>
						</env:ellipse>
						<env:texturedrectangle layer="1" height="0.5" width="0.25" x="0.11" y="-0.24" imagepath="upc/masd/movement/images/flag.png">
							<env:drawcondition>
								$object.getProperty("state").equals("analyzed")
								&amp;&amp; ($object.getProperty("ore")!=0 || $object.getProperty("capacity")!=0)
							</env:drawcondition>
						</env:texturedrectangle>
						<env:text layer="2" x="0.02" y="-0.01" size="8" font="Arial" abssize="true" text="ore: $ore$\ncapacity: $capacity$" halign="left" color="black">
							<env:drawcondition>
								$object.getProperty("state").equals("analyzed")
							</env:drawcondition>
						</env:text>
						<env:texturedrectangle layer="1" size="oresize" position="oreposition" imagepath="upc/masd/images/ore.png">
							<env:drawcondition>((Number)$object.getProperty("capacity")).intValue()>0</env:drawcondition>
						</env:texturedrectangle>
					</env:drawable>

					<!-- Homebase -->
					<env:drawable objecttype="homebase" width="0.14" height="0.12">
						<env:property name="oresize" dynamic="true">new Vector2Double(Math.sqrt(((Number)$object.getProperty("ore")).intValue()/200.0))</env:property>
						<env:property name="oreposition" dynamic="true">new Vector2Double(0, 0.3-Math.sqrt(((Number)$object.getProperty("ore")).intValue()/200.0)/2)</env:property>
						<env:rectangle layer="1" width="1" height="1" color="#1e1e1e46" />
						<env:text layer="2" x="-0.07" y="0.09" size="8" font="Arial" abssize="true" text="$text$" halign="left" color="black"/>
						<env:texturedrectangle layer="1" size="oresize" position="oreposition" imagepath="upc/masd/images/ore.png">
							<env:drawcondition>((Number)$object.getProperty("ore")).intValue()>0</env:drawcondition>
						</env:texturedrectangle>
					</env:drawable>

					<!-- Sentry -->
					<env:drawable objecttype="spy" width="0.07" height="0.07">
						<!-- <env:property name="rot" dynamic="true" class="double">new Vector3Double($object.getProperty("rotation").getXAsDouble(), 0, $object.getProperty("rotation").getYAsDouble())</env:property>  -->
						<env:property name="rot" dynamic="true" class="double">new Vector3Double(0,0,$object.getProperty("rotation").getDirectionAsDouble()-Math.PI/2)</env:property>
						<env:property name="visionsize" dynamic="true">new Vector2Double($object.getProperty("vision").doubleValue()*2)</env:property>
						
						<env:ellipse layer="1" size="visionsize" abssize="true" color="#FAFA1E32" />
						<env:texturedrectangle layer="2" imagepath="upc/masd/images/sentry.png" />
					</env:drawable>

					<env:prelayers>
						<env:tiledlayer width="0.6" height="0.6" imagepath="upc/masd/images/mars.png" />
					</env:prelayers>
				</env:perspective>		
			</env:perspectives>

			<!-- executor -->
			<env:spaceexecutor class="DeltaTimeExecutor">
				<env:property name="space">$space</env:property>
				<env:property name="tick">true</env:property>
			</env:spaceexecutor>
		</env:envspacetype>
	</extensiontypes>

	<componenttypes>
		<componenttype name="Spy" filename="upc/masd/spy/SpyAgent.class"/>
	</componenttypes>
	

	<configurations>
		<configuration name="1 Spy">
			<extensions>
				<env:envspace name="myspace" type="2dspace">
					<env:objects>
						<env:object type="homebase">
							<env:property name="position">new Vector2Double(0.3, 0.3)</env:property>
							<env:property name="space">$space</env:property><!-- hack!!! -->
							<!--   <env:property name="missiontime">
								90000 + ((IClockService)((jadex.bridge.service.component.IInternalRequiredServicesFeature)$component.getFeature(jadex.bridge.service.component.IRequiredServicesFeature.class)).getRawService(IClockService.class)).getTime()
							</env:property> -->
						</env:object>
						<env:object type="target">
							<env:property name="position">new Vector2Double(0.1, 0.2)</env:property>
							<env:property name="ore">0</env:property>
						</env:object>
						<env:object type="target">
							<env:property name="position">new Vector2Double(0.05, 0.7)</env:property>
							<env:property name="ore">200</env:property>
						</env:object>
						<env:object type="target">
							<env:property name="position">new Vector2Double(0.5, 0.6)</env:property>
						</env:object>
						<env:object type="target">
							<env:property name="position">new Vector2Double(0.8, 0.1)</env:property>
							<env:property name="ore">50</env:property>
						</env:object>
						<env:object type="target">
							<env:property name="position">new Vector2Double(0.7, 0.4)</env:property>
							<env:property name="ore">100</env:property>
						</env:object>
						<env:object type="target">
							<env:property name="position">new Vector2Double(0.8, 0.8)</env:property>
							<env:property name="ore">25</env:property>
						</env:object>
					</env:objects>
					
					<env:dataproviders>
						<env:dataprovider name="homebase_ore">
							<env:source name="$homebase" objecttype="homebase">
							</env:source>
							<env:data name="time">$time</env:data>
							<env:data name="ore_amount">$homebase.ore</env:data>
						</env:dataprovider>
					</env:dataproviders>
			
					<env:dataconsumers>
						<env:dataconsumer name="ore_chart" class="XYChartDataConsumer">
							<env:property name="dataprovider">"homebase_ore"</env:property>
							<env:property name="title">"Ore in homebase"</env:property>
							<env:property name="labelx">"Time"</env:property>
							<env:property name="labely">"Ore"</env:property>
							<env:property name="maxitemcount">500</env:property>
							<env:property name="legend">false</env:property>
							
							<!-- Defines a normal series. -->
							<env:property name="seriesname">"Ore"</env:property>
							<env:property name="valuex">"time"</env:property>
							<env:property name="valuey">"ore_amount"</env:property>
						</env:dataconsumer>
					</env:dataconsumers>
					
					<env:observers>
						<env:observer name="MarsWorld" dataview="view_all" perspective="icons">
							<env:plugin name="evaluation" class="EvaluationPlugin">
								<env:property name="component_0">((AbstractChartDataConsumer)$space.getDataConsumer("ore_chart")).getChartPanel()</env:property>
							</env:plugin>
						</env:observer>
					</env:observers>
	 			</env:envspace>
			</extensions>
			<components>
			    <component type="Spy" number="2"/>
			</components>
 		</configuration>

		<configuration name="Multi">
			<extensions>
				<env:envspace name="myspace" type="2dspace" width="2" height ="2">
					<env:objects>
						<env:object type="homebase">
							<env:property name="space">$space</env:property><!-- hack!!! -->
							<!-- <env:property name="missiontime">
								3000000 + ((IClockService)((jadex.bridge.service.component.IInternalRequiredServicesFeature)$component.getFeature(jadex.bridge.service.component.IRequiredServicesFeature.class)).getRawService(IClockService.class)).getTime()
							</env:property> -->
						</env:object>
						<env:object type="target" number="20">
							<env:property name="ore">Math.random()>0.2 ? (Integer)(5+Math.random()*35)*5 : 0</env:property>
						</env:object>
					</env:objects>
					<env:observers>
						<env:observer name="MarsWorld" dataview="view_all" perspective="icons"/>
					</env:observers>
	 			</env:envspace>
			</extensions>
			<components>
				<component type="Spy" number="2"/>
			</components>
 		</configuration>
	</configurations>

</applicationtype>
